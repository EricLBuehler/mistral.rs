searchState.loadedDescShard("mistralrs_server_core", 0, "<strong>mistral.rs server core</strong>\nChat Completions functionality and route handler.\nCompletions functionality and route handler.\nCore functionality for handlers.\nImage generation functionality and route handler.\nmistral.rs instance for server builder.\nmistral.rs server router builder.\nOpenAI compatible functionality.\nOpenAPI doc functionality.\nSpeech generation functionality and route handler.\nSSE streaming utilities.\nCustom types used in mistral.rs server core.\nGeneral utilities.\nA callback function that processes streaming response …\nA callback function that is executed when the streaming …\nRepresents different types of chat completion responses.\nA streaming response handler.\nOpenAI-compatible chat completions endpoint handler.\nAll chunks received during streaming (if <code>store_chunks</code> is …\nCreates a SSE streamer for chat completions with optional …\nCurrent state of the streaming operation\nHandle route / generation errors and logging them.\nConverts the chat completion responder into an HTTP …\nMatches and processes different types of model responses …\nOptional callback to process each chunk before sending\nOptional callback to execute when streaming completes\nParses and validates a chat completion request.\nPolls the stream for the next Server-Sent Event.\nProcess non-streaming chat completion responses.\nChannel receiver for incoming model responses\nUnderlying mistral.rs instance\nWhether to store chunks for the completion callback\nA callback function that processes streaming response …\nA callback function that is executed when the streaming …\nRepresents different types of completion responses.\nA streaming response handler.\nAll chunks received during streaming (if <code>store_chunks</code> is …\nOpenAI-compatible completions endpoint handler.\nCreates a SSE streamer for chat completions with optional …\nCurrent state of the streaming operation\nHandle route / generation errors and logging them.\nConverts the completion responder into an HTTP response.\nMatches and processes different types of model responses …\nOptional callback to process each chunk before sending\nOptional callback to execute when streaming completes\nParses and validates a completion request.\nPolls the stream for the next Server-Sent Event.\nProcess non-streaming completion responses.\nChannel receiver for incoming model responses\nUnderlying mistral.rs instance\nWhether to store chunks for the completion callback\nDefault buffer size for the response channel used in …\nCreates a channel for response communication.\nSends a request to the model processing pipeline.\nRepresents different types of image generation responses.\nReturns the argument unchanged.\nHelper function to handle image generation errors and …\nImage generation endpoint handler.\nCalls <code>U::from(self)</code>.\nConverts the image generation responder into an HTTP …\nMatches and processes different types of model responses …\nParses and validates a image generation request.\nProcess non-streaming image generation responses.\nA builder for creating a mistral.rs instance with …\nBuilds the configured mistral.rs instance.\nConfigures PagedAttention based on two flags.\nCreates a new builder with default configuration.\nProvides the default values used for the mistral.rs …\nReturns the argument unchanged.\nCreates a BERT embedding model configuration for search …\nCalls <code>U::from(self)</code>.\nCreates a new <code>MistralRsForServerBuilder</code> with default …\nSets PagedAttention.\nSets the chat template configuration.\nSets the chat template configuration if provided.\nSets whether to force CPU-only execution.\nSets the Candle device to use for model execution.\nSets whether to enable web search functionality.\nSets the in-situ quantization method.\nSets the in-situ quantization method if provided.\nSets whether to run in interactive mode.\nSets an explicit JINJA chat template file.\nSets an explicit JINJA chat template file if provided.\nSets the logging configuration.\nSets the logging configuration if provided.\nSets the maximum number of concurrent sequences.\nSets the MCP client configuration.\nSets the MCP client configuration if provided.\nSets the model to be used.\nSets whether to disable the key-value cache.\nSets the device layer mapping\nSets the device layer mapping if provided.\nSets the block size for PagedAttention.\nSets the block size for PagedAttention if provided.\nSets the GPU memory allocation for PagedAttention KV cache.\nSets the GPU memory allocation for PagedAttention KV cache …\nSets the percentage of GPU memory to utilize for …\nSets the percentage of GPU memory to utilize for …\nSets the total context length for KV cache allocation.\nSets the total context length for KV cache allocation if …\nSets the number of prefix caches to hold on the device.\nSets the prompt chunking size.\nSets the prompt chunking size if provided.\nSets the BERT model for web search assistance.\nOverride the search function used when <code>web_search_options</code> …\nSets the random seed for deterministic model behavior.\nSets the random seed if provided.\nSets the token source for authentication.\nSets whether to truncate sequences that exceed the maximum …\nThis is the axum default request body limit for the …\nA builder for creating a mistral.rs server router with …\nBuilds the configured axum router.\nCreates a new builder with default configuration.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MistralRsServerRouterBuilder</code> with default …\nSets the CORS allowed origins.\nSets a base path prefix for all routes.\nConfigures whether to include OpenAPI doc routes.\nSets the axum default request body limit.\nSets the shared mistral.rs instance\nHigh-quality lossy compression, commonly used in mobile …\nAudio format options for speech generation responses.\nChat completion request following OpenAI’s specification\nLegacy OpenAI compatible text completion request\nLossless compression, larger file sizes but good audio …\nRepresents a function call made by the assistant\nGrammar specification for structured generation\nImage generation request\nJSON schema grammar\nStructured response following a JSON schema\nJSON Schema for structured responses\nLark parser grammar\nLLGuidance grammar\nRepresents a single message in a conversation\nMessage content that can be either simple text or complex …\nInner content structure for messages that can be either a …\nModel information metadata about an available mode\nCollection of available models\nWidely compatible, lossy compression, good for web …\nMultiple possible stop sequences\nGood compression efficiency, ideal for real-time …\nRaw audio data, requires additional format specification\nRegular expression grammar\nResponse format for model output\nSingle stop sequence\nSpeech generation request\nStop token configuration for generation\nFree-form text response\nRepresents a tool call made by the assistant\nUncompressed, largest file sizes but maximum compatibility\nGenerate the appropriate MIME content type string for this …\nThe message content\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe function call details\nThe text content to convert to speech.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of connected MCP servers\nNumber of tools available from MCP servers\nThe TTS model to use for audio generation.\nThe name of the function to call\nThe function arguments\nThe desired audio format for the generated speech.\nThe role of the message sender (“user”, “assistant”…\nOptional list of tool calls\nWhether tools are available through MCP or tool callbacks\nThe type of tool being called\nThis is used to generate the OpenAPI docs. The mistral.rs …\nRepresents different types of speech generation responses.\nReturns the argument unchanged.\nHelper function to handle speech generation errors and …\nCalls <code>U::from(self)</code>.\nConverts the speech generation responder into an HTTP …\nMatches and processes different types of model responses …\nParses and validates a speech generation request.\nProcess non-streaming speech generation responses.\nSpeech generation endpoint handler.\nA streaming response handler.\nDefault keep-alive interval for Server-Sent Events (SSE) …\nThe stream has completed entirely\nRepresents the current state of a streaming response.\nThe stream is actively processing and sending response …\nThe stream has finished processing and is about to send …\nAll chunks received during streaming (if <code>store_chunks</code> is …\nCurrent state of the streaming operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the keep-alive interval for SSE streams from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional callback to process each chunk before sending\nOptional callback to execute when streaming completes\nChannel receiver for incoming model responses\nUnderlying mistral.rs instance\nWhether to store chunks for the completion callback\nThis is the <code>SharedMistralRsState</code> that has been extracted …\nA callback function that processes streaming response …\nA callback function that is executed when the streaming …\nThis is the underlying instance of mistral.rs.\nParses and loads an audio file from a URL, file path, or …\nParses and loads an image from a URL, file path, or data …")