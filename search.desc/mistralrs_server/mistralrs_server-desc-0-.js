searchState.loadedDescShard("mistralrs_server", 0, "JINJA chat template with <code>messages</code>, <code>add_generation_prompt</code>, …\nUse CPU only\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIn-situ quantization to apply.\nEnter interactive mode instead of serving a chat server.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog all responses and requests to this file\nMaximum running sequences at any time. If the …\nModel selector\nUse no KV cache.\nDisable PagedAttention on CUDA. Because PagedAttention is …\nNOTE: This can be omitted to use automatic device mapping! …\nEnable PagedAttention on Metal. Because PagedAttention is …\nBlock size (number of tokens per block) for …\nGPU memory to allocate for KV cache with PagedAttention in …\nPercentage of GPU memory to utilize after allocation of KV …\nTotal context length to allocate the KV cache for (total …\nPort to serve on.\nNumber of prefix caches to hold on the device. Other …\nNumber of tokens to batch the prompt step into. This can …\nInteger seed to ensure reproducible random number …\nIP to serve on. Defaults to “0.0.0.0”\nEnable server throughput logging, supported in the server …\nSource of the token for authentication. Can be in the …\nIf a sequence is larger than the maximum model length, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")