searchState.loadedDescShard("mistralrs_mcp", 0, "Model Context Protocol (MCP) Client Implementation\nHTTP-based MCP server using JSON-RPC over HTTP\nConfiguration for MCP client integration\nConfiguration for an individual MCP server\nSupported MCP server transport sources\nInformation about a tool discovered from an MCP server\nLocal process-based MCP server using stdin/stdout …\nWebSocket-based MCP server for real-time bidirectional …\nWhether to automatically register discovered tools with …\nOptional Bearer token for authentication\nOptional human-readable description of what the tool does\nWhether this server should be activated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for this server\nJSON schema describing the tool’s input parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of concurrent tool calls across all MCP …\nHuman-readable name for this server\nName of the tool as reported by the MCP server\nOptional resource URI patterns this server provides\nID of the server this tool comes from\nDisplay name of the server for logging and debugging\nList of MCP servers to connect to\nTransport-specific connection configuration\nOptional prefix to add to all tool names from this server\nTimeout for individual tool execution in seconds\nArguments to pass to the command\nCommand to execute (e.g., “mcp-server-filesystem”)\nOptional environment variables for the process\nOptional headers to include in requests (e.g., API keys, …\nOptional headers for the WebSocket handshake\nOptional timeout in seconds for HTTP requests Defaults to …\nOptional timeout in seconds for connection establishment …\nBase URL of the MCP server (http:// or https://)\nWebSocket URL (ws:// or wss://)\nOptional working directory for the process\nHTTP-based MCP server connection\nMCP client that manages connections to multiple MCP servers\nTrait for MCP server connections\nProcess-based MCP server connection\nWebSocket-based MCP server connection\nCall a tool on this server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet tool callbacks that can be used with the existing tool …\nGet tool callbacks with their associated Tool definitions\nGet discovered tools information\nInitialize connections to all configured servers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available resources from this server\nList available tools from this server\nCreate a new MCP client with the given configuration\nCheck if the connection is healthy\nRead a resource from this server\nGet the server ID\nGet the server name\nCalled function with name and arguments\nFunction definition for a tool\nTool definition\nCallback used for custom tool functions. Receives the …\nA tool callback with its associated Tool definition.\nCollection of callbacks keyed by tool name.\nCollection of callbacks with their tool definitions keyed …\nType of tool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHTTP-based MCP transport\nTransport layer for MCP communication\nProcess-based MCP transport using stdin/stdout …\nWebSocket-based MCP transport\nClose the transport connection\nCloses the HTTP transport connection\nTerminates the child process and cleans up resources\nGracefully closes the WebSocket connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new HTTP transport for MCP communication\nCreates a new process transport by spawning an MCP server …\nCreates a new WebSocket transport connection to an MCP …\nCheck if the transport connection is healthy\nTests the HTTP connection by sending a ping request\nTests the process connection by sending a ping request\nSends a WebSocket ping frame to test connection health\nSend initialization noification\nSends the server a initialization notification to let it …\nSends the server a initialization notification to let it …\nSends the server a initialization notification to let it …\nSend a JSON-RPC request and receive a response\nSends an MCP request over HTTP and returns the response\nSends an MCP request to the child process and returns the …\nSends an MCP request over WebSocket and waits for the …\nMCP content types\nFunction schema for MCP tools\nMCP initialization result\nReference to an MCP resource\nMCP server capabilities\nMCP server information\nMCP tool call result\nOpenAI-compatible tool schema for MCP tools\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.")